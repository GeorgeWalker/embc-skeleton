// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Jag.Embc.Interfaces.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq; using System.ComponentModel.DataAnnotations.Schema;

    /// <summary>
    /// PicklistAttributeMetadata
    /// </summary>
    public partial class MicrosoftDynamicsCRMPicklistAttributeMetadata
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftDynamicsCRMPicklistAttributeMetadata class.
        /// </summary>
        public MicrosoftDynamicsCRMPicklistAttributeMetadata()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftDynamicsCRMPicklistAttributeMetadata class.
        /// </summary>
        public MicrosoftDynamicsCRMPicklistAttributeMetadata(string formulaDefinition = default(string), int? sourceTypeMask = default(int?), string parentPicklistLogicalName = default(string), IList<string> childPicklistLogicalNames = default(IList<string>))
        {
            FormulaDefinition = formulaDefinition;
            SourceTypeMask = sourceTypeMask;
            ParentPicklistLogicalName = parentPicklistLogicalName;
            ChildPicklistLogicalNames = childPicklistLogicalNames;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FormulaDefinition")]
        public string FormulaDefinition { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SourceTypeMask")]
        public int? SourceTypeMask { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ParentPicklistLogicalName")]
        public string ParentPicklistLogicalName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ChildPicklistLogicalNames")]
        [NotMapped] public IList<string> ChildPicklistLogicalNames { get; set; }

    }
}
